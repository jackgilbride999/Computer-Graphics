#version 330 core

out vec4 FragColor;

in vec3 tnorm;					// eye space representation of the normal
in vec3 vertex_inWorldSpace;	// world space representation of the vertex

vec3 ambient_light_color = vec3(0.5, 0.5, 0.5);
vec3 diffuse_light_color = vec3(0.5, 0.5, 0.5);
vec3 spec_light_color = vec3(1.0, 1.0, 1.0);  

uniform vec3 object_color;

uniform vec3 lights_position[];


uniform vec3 view_pos;

uniform float specular_coef;

vec3 view_dir;

void main(){
	// ambient
	float ambientStrength = 0.1;
	vec3 ambient = ambientStrength * ambient_light_color;

	vec3 runningTotal = ambient;


	// diffuse
	vec3 norm = normalize(tnorm);
	vec3 light_dir = normalize(lights_position[0] - vertex_inWorldSpace);
	float diff = max(dot(norm, light_dir), 0.0);
	vec3 diffuse = diff * diffuse_light_color;

	runningTotal += diffuse;

	// diffuse
	norm = normalize(tnorm);
	light_dir = normalize(lights_position[1] - vertex_inWorldSpace);
	diff = max(dot(norm, light_dir), 0.0);
	diffuse = diff * diffuse_light_color;
	
	runningTotal += diffuse;

	// specular
	float specularStrength = 1;
	view_dir = normalize(view_pos - vertex_inWorldSpace);
	vec3 reflect_dir = normalize(reflect(light_dir, tnorm));
	float spec_dot = max(dot(view_dir, reflect_dir), 0.0);
	float spec = pow(spec_dot, specular_coef);
	vec3 specular = spec * specularStrength * spec_light_color;

	vec3 result = (specular + runningTotal) * object_color;
	FragColor = vec4(result, 1.0);
}